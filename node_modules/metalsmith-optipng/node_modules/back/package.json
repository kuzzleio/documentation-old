{
  "_args": [
    [
      {
        "raw": "back@https://registry.npmjs.org/back/-/back-1.0.1.tgz",
        "scope": null,
        "escapedName": "back",
        "name": "back",
        "rawSpec": "https://registry.npmjs.org/back/-/back-1.0.1.tgz",
        "spec": "https://registry.npmjs.org/back/-/back-1.0.1.tgz",
        "type": "remote"
      },
      "/home/sstafyniak/src/poc-metalsmith/node_modules/metalsmith-optipng"
    ]
  ],
  "_from": "back@>=1.0.0 <1.1.0",
  "_id": "back@1.0.1",
  "_inCache": true,
  "_location": "/metalsmith-optipng/back",
  "_phantomChildren": {},
  "_requested": {
    "raw": "back@https://registry.npmjs.org/back/-/back-1.0.1.tgz",
    "scope": null,
    "escapedName": "back",
    "name": "back",
    "rawSpec": "https://registry.npmjs.org/back/-/back-1.0.1.tgz",
    "spec": "https://registry.npmjs.org/back/-/back-1.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/metalsmith-optipng",
    "/metalsmith-optipng/mana"
  ],
  "_resolved": "https://registry.npmjs.org/back/-/back-1.0.1.tgz",
  "_shasum": "704f8a23da7ae35b7d47b648f9a79fd2a25570e3",
  "_shrinkwrap": null,
  "_spec": "back@https://registry.npmjs.org/back/-/back-1.0.1.tgz",
  "_where": "/home/sstafyniak/src/poc-metalsmith/node_modules/metalsmith-optipng",
  "author": {
    "name": "Jarrett Cruger",
    "email": "jcrugzz@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/jcrugzz/back/issues"
  },
  "contributors": [
    {
      "name": "Jake Verbaten",
      "email": "raynos2@gmail.com"
    }
  ],
  "dependencies": {
    "xtend": "^4.0.0"
  },
  "description": "Simple exponential backoff pulled out of Primus by @3rd-Eden",
  "devDependencies": {
    "tape": "2.1.x"
  },
  "engines": {
    "node": "0.12.x || 0.10.x || 0.8.x"
  },
  "homepage": "https://github.com/jcrugzz/back#readme",
  "keywords": [
    "random",
    "exponential",
    "backoff"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "back",
  "optionalDependencies": {},
  "readme": "# back\n\n[![build\nstatus](https://secure.travis-ci.org/jcrugzz/back.png)](http://travis-ci.org/jcrugzz/back)\n\n[![NPM](https://nodei.co/npm/back.png)](https://nodei.co/npm/back/)\n\nA simple module to be used for creating exponentially weighted backoff attempts.\nOriginally extracted from [Primus][Primus].\n\n__NOTICE__\nIf you were a pre-1.0.0 `back` user, the API has changed to what is found below.\nIf you do not like this slightly different abstraction and would prefer the\nformer, slightly simpler API, it is still available with `require('back/reconnect')`.\n\nThe API change thanks to a contribution from\n[@Raynos](https://github.com/Raynos) makes things simpler as you don't have to\nmanage the copying of the options object yourself in order to handle repeated\nbackoff cases.\n\n## Example\n\n```js\nvar http = require('http');\nvar back = require('back');\n//\n// Options to use for backoff\n//\n// Remark: This object is modified so it should be cloned if you are dealing\n// with independent backoff attempts and want to use these values as a base.\n//\nvar options = {\n  retries: 3,\n  minDelay: 1000, // Defaults to 500ms\n  maxDelay: 10000, // Defaults to infinity\n  // The following option is shown with its default value but you will most\n  // likely never define it as it creates the exponential curve.\n  factor: 2,\n};\n\n// Where we will store the backoff instance during a particular backoff attempt\nvar attempt;\n\nfunction retry(err) {\n  var back = attempt || (attempt = new Back(options));\n  return back.backoff(function (fail) {\n    if (fail) {\n      // Oh noez we never reconnect :(\n      console.error('Retry failed with ' + err.message);\n      process.exit(1);\n    }\n    //\n    // Remark: .attempt and .timeout are added to this object internally\n    //\n    console.log('Retry attempt # ' + back.settings.attempt +\n                ' being made after ' + back.settings.timeout + 'ms');\n  request();\n  });\n}\n\nfunction request() {\n  http.get('http://localhost:9000', function (res) {\n    console.log('Successful Response that will not happen!');\n    //\n    // If we succeeded, we would set the current to null so the next error\n    // generates a new instance.\n    //\n    attempt = null;\n  }).on('error', retry);\n}\n\nrequest();\n```\n\n## API\n\n### `var back = new Back(backoffOpts);`\n\nThe `Back` constructor function takes your backoff options and saves them as\n`settings` in the internal state of the `back` object.\n\n#### `back.backoff(callback)`\n\nThe `back` instance has a `backoff` method that takes a  `callback` that is\nexecuted after a `setTimeout`. The timeout is what is based on an [exponential\nbackoff](http://dthain.blogspot.nl/2009/02/exponential-backoff-in-distributed.html) of course!\nIt will repeatedly all this callback based on the backoff options you passed to\nthe back instance until it exhausts its efforts. When it has exhausted its\nattempts, it will return an error as the first argument to the callback.\n\n#### `back.close()`\n\nClear backoff timer in cases where you want to dispose of the instance before the `callback` is executed.\n\n[Primus]: https://github.com/3rd-Eden/primus\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git://github.com/jcrugzz/back.git"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "version": "1.0.1",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "0.12.x || 0.10.x || 0.8.x"
      },
      "pkgid": "back@1.0.1"
    }
  ]
}
