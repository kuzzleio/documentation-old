{
  "_args": [
    [
      {
        "raw": "fusing@https://registry.npmjs.org/fusing/-/fusing-0.2.3.tgz",
        "scope": null,
        "escapedName": "fusing",
        "name": "fusing",
        "rawSpec": "https://registry.npmjs.org/fusing/-/fusing-0.2.3.tgz",
        "spec": "https://registry.npmjs.org/fusing/-/fusing-0.2.3.tgz",
        "type": "remote"
      },
      "/home/sstafyniak/src/poc-metalsmith/node_modules/metalsmith-optipng"
    ]
  ],
  "_from": "fusing@>=0.2.0 <0.3.0",
  "_id": "fusing@0.2.3",
  "_inCache": true,
  "_location": "/metalsmith-optipng/fusing",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fusing@https://registry.npmjs.org/fusing/-/fusing-0.2.3.tgz",
    "scope": null,
    "escapedName": "fusing",
    "name": "fusing",
    "rawSpec": "https://registry.npmjs.org/fusing/-/fusing-0.2.3.tgz",
    "spec": "https://registry.npmjs.org/fusing/-/fusing-0.2.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/metalsmith-optipng",
    "/metalsmith-optipng/licenses",
    "/metalsmith-optipng/shrinkwrap"
  ],
  "_resolved": "https://registry.npmjs.org/fusing/-/fusing-0.2.3.tgz",
  "_shasum": "d0eefaf985d2bafded44af8b185316f6e429e1db",
  "_shrinkwrap": null,
  "_spec": "fusing@https://registry.npmjs.org/fusing/-/fusing-0.2.3.tgz",
  "_where": "/home/sstafyniak/src/poc-metalsmith/node_modules/metalsmith-optipng",
  "author": {
    "name": "Arnout Kazemier"
  },
  "bugs": {
    "url": "https://github.com/bigpipe/fusing/issues"
  },
  "dependencies": {
    "predefine": "0.1.x"
  },
  "description": "Prototype fusion",
  "devDependencies": {
    "chai": "1.9.x",
    "mocha": "1.18.x",
    "pre-commit": "0.0.x"
  },
  "homepage": "https://github.com/bigpipe/fusing",
  "keywords": [
    "fusing",
    "fusion",
    "bigpipe",
    "constructor",
    "prototype",
    "merge",
    "inherit",
    "base",
    "class"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "fusing",
  "optionalDependencies": {},
  "readme": "# fusing\n\n[![Build Status](https://travis-ci.org/bigpipe/fusing.png?branch=master)](https://travis-ci.org/bigpipe/fusing)\n\nFusing is a small library that creates the base class that is used in all of\n[bigpipe]'s components. It takes care of:\n\n- Prototypical inheritance.\n- An API for adding `readable` and `writable` properties to these classes.\n- Adding default methods which are commonly used.\n- A `Backbone.extend` based extending of the prototypes.\n\n## Installation\n\nThe stable versions of this module are released in the npm registry and can be\ninstalled using:\n\n```\nnpm install --save fusing\n```\n\nThe `--save` tells `npm` to automatically save this dependency in your\n`package.json`.\n\n## Getting Started\n\nThe module is required just like any other module you use. It exposes a single\nfunction that takes care of all the merging.\n\n```js\n'use strict';\n\nvar fuse = require('fusing');\n```\n\nAnd that is all we need to start with inheritance. When you want to have a class\ninherit from the `EventEmitter` you only need to pass in the class references:\n\n```js\nfunction Example() {\n\n}\n\nfuse(Example, require('events').EventEmitter);\n```\n\nThis will tell `fuse` to use the `.prototype` of the `EventEmitter` for your\n`Example` class. In addition to that it has added a couple of function to your\nclass which makes it easier to setup the prototypes and extend Example again.\n\n### Example.readable\n\nOne of the functions that are added to your class is `readable` this allows you\nto easily specify which properties or methods on the `Example.prototype` are\n`read-only` and should never be overridden by other code. This is ideal for\nprotecting your private methods.\n\n```js\nExample.readable('config', { foo: 'bar' });\n```\n\nThe example above added the property `config` to the prototype with the foo/bar\nobject as value. If you wonder how this magic works, take a look a our\n[predefine] project for more details.\n\n**Please note that this function is added on the `Example` function not on the\n`Example.prototype`.**\n\n### Example.writable\n\nThis is the writable equivalent of the function above. This allows you to\nspecify properties on the prototype that are writable. The added benefit of this\nfunction is that your methods will not be enumerable (which is also true for all\nproperties/methods added using the `readable` function).\n\n```js\nExample.writable('property', 'foo');\n```\n\n**Please note that this function is added on the `Example` function not on the\n`Example.prototype`.**\n\n## Example.extend\n\nThis allows you to use the same `extend` functionality that you might be\naccustomed to with `Backbone` in your own classes:\n\n```js\nvar MyExample = Example.extend({\n  method: function method() {\n    console.log('my custom method');\n  },\n\n  prop: 132\n});\n```\n\n**Please note that this function is added on the `Example` function not on the\n`Example.prototype`.**\n\n## Example.predefine\n\nAs it's sometimes useful to also create readable and writable properties when\nyour class is constructed, we decided to expose the `predefine` module on your\nclass. Which allows you use the same readable pattern again:\n\n```js\nfunction Example() {\n  var writable = Example.predefine(this, Example.predefine.WRITABLE)\n    , readable = Example.predefine(this);\n\n  readable('private', 134);\n  readable('evn', process.ENV.NODE_ENV || 'development');\n  writable('value', 100);\n}\n\nfuse(Example, require('eventemitter3'));\n```\n\n**Please note that this function is added on the `Example` function not on the\n`Example.prototype`.**\n\n## License\n\nMIT\n\n[bigpipe]: https://github.com/bigpipe/bigpipe\n[predefine]: https://github.com/bigpipe/predefine\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bigpipe/fusing.git"
  },
  "scripts": {
    "test": "mocha $(find test -name '*.test.js')"
  },
  "version": "0.2.3"
}
