{
  "_args": [
    [
      {
        "raw": "mana@https://registry.npmjs.org/mana/-/mana-0.1.41.tgz",
        "scope": null,
        "escapedName": "mana",
        "name": "mana",
        "rawSpec": "https://registry.npmjs.org/mana/-/mana-0.1.41.tgz",
        "spec": "https://registry.npmjs.org/mana/-/mana-0.1.41.tgz",
        "type": "remote"
      },
      "/home/sstafyniak/src/poc-metalsmith/node_modules/metalsmith-optipng"
    ]
  ],
  "_from": "mana@>=0.1.0 <0.2.0",
  "_id": "mana@0.1.41",
  "_inCache": true,
  "_location": "/metalsmith-optipng/mana",
  "_phantomChildren": {
    "predefine": "0.1.2"
  },
  "_requested": {
    "raw": "mana@https://registry.npmjs.org/mana/-/mana-0.1.41.tgz",
    "scope": null,
    "escapedName": "mana",
    "name": "mana",
    "rawSpec": "https://registry.npmjs.org/mana/-/mana-0.1.41.tgz",
    "spec": "https://registry.npmjs.org/mana/-/mana-0.1.41.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/metalsmith-optipng",
    "/metalsmith-optipng/githulk",
    "/metalsmith-optipng/npm-registry"
  ],
  "_resolved": "https://registry.npmjs.org/mana/-/mana-0.1.41.tgz",
  "_shasum": "7cb13f73218668654229635c4fc5b17e26f93b7d",
  "_shrinkwrap": null,
  "_spec": "mana@https://registry.npmjs.org/mana/-/mana-0.1.41.tgz",
  "_where": "/home/sstafyniak/src/poc-metalsmith/node_modules/metalsmith-optipng",
  "author": {
    "name": "Arnout Kazemier"
  },
  "bugs": {
    "url": "https://github.com/3rd-Eden/mana/issues"
  },
  "dependencies": {
    "assign": ">=0.1.7",
    "back": "1.0.x",
    "diagnostics": "1.0.x",
    "eventemitter3": "1.2.x",
    "fusing": "1.0.x",
    "millisecond": "0.1.x",
    "request": "2.x.x"
  },
  "description": "mana potion",
  "devDependencies": {
    "assume": "1.4.x",
    "mocha": "2.5.x",
    "pre-commit": "1.1.x"
  },
  "homepage": "https://github.com/3rd-Eden/mana",
  "keywords": [
    "api",
    "api-client",
    "api-structure",
    "base",
    "client",
    "cows",
    "mana",
    "rest"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "mana",
  "optionalDependencies": {},
  "readme": "# mana\n\n[![Build Status](https://travis-ci.org/3rd-Eden/mana.svg)](https://travis-ci.org/3rd-Eden/mana)\n\nMana is an small package that provides basic and a dead simple API structure for\ncreating high performance API clients. Take your mana potion and start creating\nmagical API clients which contain the following powers:\n\n- **Rolling tokens** Supports multiple OAuth tokens which will be switched when\n  rate limits are hit.\n- **Callback queue** Multiple requests calls to the same URL will result in a\n  single call.\n- **Mirrors** When API endpoints become unresponsive, alternate replica's or\n  mirrors API's can be hit instead.\n- **Back off** Build in exponential back off when the API endpoint returns an\n  error or error code.\n- **Conditional requests** Requests with Etags can be cached and result will be\n  reused when a 304 is returned. (Supports async and sync cache engines.)\n\n## Installation\n\nThe module is released through npm.\n\n```\nnpm install --save mana\n```\n\n## Assumptions\n\nBefore you get started with building your first mana based API client there are\nsome assumptions we make\n\n### Tokens\n\nWe assume that the supplied token(s) should be used as `Authorization` header\nand that the supplied token should be prefixed with `token `.\n\n### Rate limiting\n\nAgain, we have to make some sane assumptions here as well. There tons of ways\nthat an API server can say that you've reached your limit. We assume that it\nsends the following headers with each HTTP response: \n\n- `x-ratelimit-reset` Time when the limit is reset in UTC EPOCH seconds.\n- `x-ratelimit-limit` Maximum of requests the user can make.\n- `x-ratelimit-remaining` The amount of requests the user has left.\n\nWe will only take these values in to account when multiple tokens are used and a\nnone `200` status code has been returned from the server.\n\n### Caching\n\nIn order to relieve stress on the API server that you're implementing there is\nan option to supply a cache instance which will be used to store responses that\nhave `etag` headers. When we're about to request an API we check if the URL has\nbeen stored in the cache and use the stored `etag` in the `if-none-match` header\nso we can trigger a `304` response on the API end point and use our cached data\ninstead. This reduces the amount of data you need receive over the connection\nand some API providers like GitHub don't count `304` requests as part of their\nrate limiting.\n\nSee [mana.fireforget()](#manafireforget) for more details on the cache API\nrequirements.\n\n## Usage\n\nIn all of the examples we assume that you've loaded the library using:\n\n```js\n'use strict';\n\nvar mana = require('mana');\n```\n\nTo create you own custom mana instance you need to extend the returned mana\ninstance. Extending is done by calling the `mana.extend` method with an object\nwhich will be merged on the prototype:\n\n```js\nvar MyAPI = mana.extend({\n  api: 'https://api.im-implementing.com/'\n});\n```\n\nIn the code snippet you see us adding the `api` property and storing the result\nof the extending as the `MyAPI` class. The `api` property is one of the\nproperties that are required and need to be specified on every single instance.\nThe following properties are required to be specified on your custom mana:\n\n- `api` The URL of the site we're communicating with.\n- `name` Name of your module.\n- `version` Version number of your module.\n\nThe `version` and `name` can be set automatically if you are using the\n`.drink(module)` method to expose the module and lazy load the API endpoints. It\ndoes make the assumption that `package.json` file is in the same directory as\nthe file that calls the `.drink` method.\n\nThere are also a couple of properties which are optional but can be overridden if\nneeded:\n\n- `maxdelay` The maximum delay for the exponential back off. Defaults to `60\n  seconds`.\n- `mindelay` The minimum delay for the exponential back off. Defaults to `100 ms`.\n- `retries` The maximum of retries of the API call we can do. Defaults to 3.\n- `factor` The exponential back off factor. Defaults to 2.\n- `timeout` How long a request should run before we automatically assume it\n  timed out. Defaults to `20 seconds`.\n- `_view` The prefix to access CouchDB view/design doc. Defaults to `/-/_view/`\n  which is the same as `npm` is using.\n- `strictSSL` Should we request everything with strict SSL. Defaults to `false`.\n- `maxSockets` Maximum amount of sockets. Defaults to `444`.\n- `prefix` The prefix for the authorization header value, defaults to `token `.\n\nEvery property that represents time can be set with either a number in\nmilliseconds as value or a human readable string like `10 seconds`. This is\nparsed to milliseconds automatically but improves the readability of your code\nbase.\n\n### mana.querystring()\n\nTransform an random object in a query string. If there are no keys or matches in\nthe object an empty string will be returned instead. The function accepts 2\narguments:\n\n1. `options` The supplied object/options where we extract the parameters from\n2. `allowed` An array with keys that are accepted as parameters or an object\n   with key->value where key are the accepted parameters and value's the default\n   value for when it's missing on the supplied object.\n\n```js\nmana.extend({\n  initialize: function (options) {\n    this.api = this.querystring(options, [\n      'foo',\n      'bar'\n    ]);\n\n    //\n    // if the options object had foo and bar the `this.api` would now be:\n    //\n    //   ?foo=<value>&bar=<value>\n    //\n\n    this.api = this.querystring(options, {\n      foo: 'foo',\n      bar: 'bar'\n    });\n\n    //\n    // if options was empty, the `this.api` would now be\n    //\n    //   ?foo=foo&bar=bar\n    //\n  }\n});\n```\n\n### mana.json()\n\nThis does exactly the same the `mana.querystring` method but instead of\nreturning a query string it will return a new object.\n\n```js\nmana.extend({\n  initialize: function (options) {\n    options = this.json(options, {\n      foo: 'foo',\n      bar: 'bar'\n    });\n  }\n});\n```\n\n### mana.debug()\n\nAdd extra debug information which can be triggered enabling the [debug](#debugging)\nflags when you start your application. It's not advised to override this when\nextending mana. It accepts multiple arguments but the first argument would be\nthe log/template string that is actually outputted. This first line is processed\nby same function that you would also normally use in `console.log` so all the\n`%s` and `%d` formatting still function as intended.\n\n```js\nMyAPI = mana.extend({\n  initialize: function init(options) {\n    this.debug('you and users can only see this when the DEBUG env variable is set');\n    this.debug('%d digits and event %j json can be outputted', 1, { foo: 'bar' });\n  }\n});\n```\n\n### mana.args()\n\nParse arguments or supplied array and return an object with all arguments\nclassified by type and shorthand. It accepts one argument which would be the\n`Arguments` that your function receives or an `Array`.\n\n```js\nmana.extend({\n  customfunction: function (args) {\n    args = this.args(arguments);\n\n    console.log(args.str, args.fn, args.options, args.string);\n  }\n});\n```\n\nAs you can see in the example above we also map a view values to a more sensible\nname.\n\n- `function` -> `fn`\n- `object` -> `options`\n- `string` -> `str`\n- `number` -> `nr`\n\n### mana.type()\n\nGet accurate type information for the given JavaScript class.\n\n```js\nmana.extend({\n  foo: function (bar) {\n    if (this.type(bar) === 'array') doarraystuff();\n    else dosomethingelse();\n  }\n});\n```\n\n### mana.send()\n\nThis the method what it's all about. This is the part where you actually start\nsending a request to the specified URL. This method accepts multiple arguments.\n\n- `string`: This is the path that you want to request on the URL.\n- `array`: If you didn't supply a string, you need to supply an Array with\n  paths. This array will be filtered with `Boolean()` and then joined with `/`\n  to generate a path. In some cases this much more readable then doing a lot of\n  concatenations manually in your code to produce a string.\n- `function`: The actual callback function that should receive the results. We\n  assume that this callback follows the error first pattern.\n\nIn addition to these arguments we also accept an options object/argument which\nis used to fully configure the way we send requests. It supports a ton of\noptions.\n\n- `api`: An alternate API which will be used instead of `mana.api`. It should be\n  a string.\n- `method`: The HTTP method that should be used for the request. It defaults to\n  `GET`>\n- `timeout`: Alternate timeout which be used instead of `mana.timeout`.\n- `strictSSL`: Should this we request with strictSSL? Defaults to `mana.stictSSL`.\n- `headers`: An object of headers that need to be added to the request. The\n  object should be formatted as key (header name) -> value (header value).\n- `maxSockets` The maximum amount of sockets. Defaults to `mana.maxSockets`.\n- `maxdelay` The maximum delay for the exponential back off. Defaults to\n  `mana.maxdelay`.\n- `mindelay` The minimum delay for the exponential back off. Defaults to\n  `mana.mindelay`.\n- `retries` The maximum of retries of the API call we can do. Defaults to\n  `mana.retries`.\n- `assign` A custom or pre-build [assign] instance that should be used to write\n  the data against. This can be useful if you need to make multiple requests\n  against various of API points but want to process it all at once with one\n  callback.\n- `factor` The exponential back off factor. Defaults to `mana.factor`.\n- `params` Array or object with params that should be send to the server. If\n  method is set to `GET` we will use `mana.querystring` and append it after the\n  pathname. If the URL already has a query string, it will be merged and\n  potentially overridden using these options. For all other HTTP methods we\n  assume that this is the data should be send to the server and send transform\n  it using `mana.json` to a JSON body.\n- `next` A function which will control what happens next after the data has been\n  received from the server. If nothing is provided we will automatically end the\n  returned [assign] instance so the callback gets triggered. If you did supply\n  this function it will be called with the following arguments:\n  - `res` The HTTP response object\n  - `assign` The assign instance we would have ended\n  - `args` The compiled arguments object of the current `send` call.\n\nIn the options you've seen that we allow sending of custom headers. There are\nsome headers we will append by default if they are not specified:\n\n- `User-Agent` We will use the format `<mana.name>/<mana.version> node/<process.version>`\n  as user agent format.\n- `Authorization` If not authorization header is present we will attempt to use\n  the one that is set at `mana.authorization`\n- `Accept` This will be set to `application/json`.\n\nIf cache has been specified on the `mana` object and a cache entry is also\navailable we will also add a `if-none-match` header with the value of the\nreturned `etag` during the time of the caching.\n\n```js\nmana.extend({\n  afunction: function fn(id, callback) {\n    var x = this.send(['path', id, 'action'], this.merge(body, {\n      headers: {\n        'x-foo-bar': 'foboar'\n      }\n    }), callback);\n\n    //\n    // As the `send` method returns an Assign instance we can do\n    // map/reduce/filter operation on the returned dataset. This ensures that\n    // the supplied callback gets a data structure that we want and not that the\n    // API server returns.\n    //\n    x.map(function (row) {\n      return {\n        id: row.id,\n        whatever: row.foo.bar\n      }\n    });\n  }\n})\n```\n\n### mana.view()\n\nThe view method allows you do to some basic requests against a CouchDB interface\nit makes this a bit more easier to work with. It accepts 3 arguments, the order\nof these arguments do not matter.\n\n- `string`, **required**, The name of the CouchDB view you're requesting.\n- `function`, **required** The callback function which follows an error first\n  callback pattern.\n- `object` Optional configuration:\n  - `group_level`: The group level of the query, defaults to `3`\n  - `key`: Will be set as `startkey` and `endkey` so you can search for results.\n  - `descending`: Should the results that are returned be descending. Defaults\n    to `false`.\n  - `stale`: OK or `update_after` which is the default value.\n  - `limit`: Limit the number of documents returned\n  - `skip`: Skip the x number of documents\n\nThis function will return a [assign] instance which can be used to transform and\nmanipulate the data if needed.\n\n```js\nmana.extend({\n  foo: function () {\n    this.view('/foo', {\n      key: 'known key',\n      skip: 10\n    }, function (err, data) {\n    \n    });\n  }\n});\n```\n\n### mana.fireforget()\n\n**This is a private method, do not touch unless you feel adventurous.**\n\nSimple wrapper around a possible cache interfaces. Both async and sync\ninterfaces are supported. We assume that the cache is stored on the mana\ninstance as `cache` property. This cache instance should have a minimum of 2\nmethods:\n\n- `cache.get` Which receives a key of the cache it needs to retrieve. If 2\n  arguments are accepted in the function we assume that the second argument is a\n  callback and that it's executed asynchronously.\n- `cache.set` Which stores the key and value. If 3 or more arguments are\n  accepted we assume that the method is async and that the last supplied\n  argument should be a callback.\n\n### mana.downgrade()\n\n**This is a private method, do not touch unless you feel adventurous.**\n\nDowngrade the list of given mirrors so we can query against a different server\nwhen our default api endpoint is down.\n\n### mana.roll()\n\n**This is a private method, do not touch unless you feel adventurous.**\n\nThis attempts to select a new token when the `remaining` api calls has been set\nto 0. It filters all tokens to see which ones are available and most likely to\nbe reset or still have remaining API calls. The token with the highest remaining\nAPI calls will be set returned first and set as `Authorization` header.\n\n### mana.tokenizer()\n\n**This is a private method, do not touch unless you feel adventurous.**\n\nTransforms the `tokens` property in to an array of `mana.Token` instances. And\nit removes all duplicates and potential undefined values.\n\n### mana.all()\n\n**This is a private method, do not touch unless you feel adventurous.**\n\nReturns a function will will call queued functions for the given `urid`.\n\n### mana.fetching()\n\n**This is a private method, do not touch unless you feel adventurous.**\n\nCheck if we are already fetching the given request.\n\n## Inherited\n\nThere are also a couple of methods that mana has because it inherits from\ncertain modules. The mana instance that you create is an `EventEmitter` not the\nregular emitter from node but a high-performance variant of it. It's an\n[EventEmitter3](https://github.com/3rd-Eden/eventemitter3). So all `emit`, `on`\nand all other EventEmitter related methods are available for you to use and\nabuse.\n\nAs the extending is done using the [fusing](https://github.com/bigpipe/fusing)\nlibrary it also inherits the following methods:\n\n- [`Mana/this.readable('name', 'value')`](https://github.com/bigpipe/fusing#examplereadable)\n- [`Mana/this.writable('name', 'value')`](https://github.com/bigpipe/fusing#examplewritable)\n- [`Mana/this.get('name', 'value')`](https://github.com/bigpipe/fusing#exampleget)\n- [`Mana/this.set('name', 'value')`](https://github.com/bigpipe/fusing#exampleset)\n- [`this.merge(obj, obj2)`](https://github.com/bigpipe/predefine#predefinemerge)\n- [`this.mixin(obj, obj2)`](https://github.com/bigpipe/predefine#predefinemixin)\n- [`this.emits(event)`](https://github.com/bigpipe/fusing/blob/master/index.js#L154)\n\n## Debugging\n\nThe are various of debug outputs available for this module. Debugging is using\nthe [diagnostics](https://github.com/3rd-Eden/diagnostics) module which will\nread out the `DEBUG` and `DIAGNOSTICS` environment variables of your machine to\nsee if it needs to output debug information to STDOUT. \n\nThis is also one of the reasons why the `name` property is required as this name\nis used for the debug flags. If you've named API `example` you can output debug\ninformation by starting your application using:\n\n```\nDEBUG=example* node <your-app-index.js>\n```\n\nMana it self also have a few lines of debug output and they can be seen using:\n\n```\nDEBUG=mana node <your-app-index.js>\n```\n\n## Drinking the potion\n\nThe module assumes a simple pattern. The API end points are listed in a folder\ncalled `endpoints`. This folder contains JavaScript files which exports\na function:\n\n```js\nfunction Endpoint(api) {\n  this.api = api;\n}\n\nmodule.exports = Endpoint\n```\n\nThis function receives a reference to your base API class once it's initialised.\nThese API endpoints will be introduced on the prototype of your base API in\nlowercase. So if you name your file `Endpoints` it will create an\n`base.endpoints` method for you which access this constructed function. Now the\nbeauty of this is that these methods support lazy construction. So only when you\naccess the `.endpoints` property, it will create a new instance (only once\nof course). This way you don't construct pointless API points that might never be\nused by your users. \n\nIn addition to lowercasing your endpoint and introducing it as constructed\nproperty it also exposes the Full class on the base API. This class is Uppercase\nfirst, just like all Classes should be in JavaScript.\n\n## License\n\nMIT\n\n[assign]: http://github.com/3rd-Eden/assign\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/3rd-Eden/mana.git"
  },
  "scripts": {
    "test": "mocha test.js"
  },
  "version": "0.1.41"
}
