{
  "_args": [
    [
      {
        "raw": "memoizeasync@https://registry.npmjs.org/memoizeasync/-/memoizeasync-0.0.1.tgz",
        "scope": null,
        "escapedName": "memoizeasync",
        "name": "memoizeasync",
        "rawSpec": "https://registry.npmjs.org/memoizeasync/-/memoizeasync-0.0.1.tgz",
        "spec": "https://registry.npmjs.org/memoizeasync/-/memoizeasync-0.0.1.tgz",
        "type": "remote"
      },
      "/home/sstafyniak/src/poc-metalsmith/node_modules/metalsmith-optipng"
    ]
  ],
  "_from": "memoizeasync@0.0.1",
  "_id": "memoizeasync@0.0.1",
  "_inCache": true,
  "_location": "/metalsmith-optipng/memoizeasync",
  "_phantomChildren": {},
  "_requested": {
    "raw": "memoizeasync@https://registry.npmjs.org/memoizeasync/-/memoizeasync-0.0.1.tgz",
    "scope": null,
    "escapedName": "memoizeasync",
    "name": "memoizeasync",
    "rawSpec": "https://registry.npmjs.org/memoizeasync/-/memoizeasync-0.0.1.tgz",
    "spec": "https://registry.npmjs.org/memoizeasync/-/memoizeasync-0.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/metalsmith-optipng",
    "/metalsmith-optipng/optipng"
  ],
  "_resolved": "https://registry.npmjs.org/memoizeasync/-/memoizeasync-0.0.1.tgz",
  "_shasum": "5883ed192c7d3972f2fb29ea4202d49a093763f7",
  "_shrinkwrap": null,
  "_spec": "memoizeasync@https://registry.npmjs.org/memoizeasync/-/memoizeasync-0.0.1.tgz",
  "_where": "/home/sstafyniak/src/poc-metalsmith/node_modules/metalsmith-optipng",
  "author": {
    "name": "Andreas Lind Petersen",
    "email": "andreas@one.com"
  },
  "bugs": {
    "url": "https://github.com/papandreou/node-memoizeasync/issues"
  },
  "dependencies": {},
  "description": "Helper for memoizing async functions and methods",
  "devDependencies": {
    "expect.js": "=0.2.0",
    "mocha": "=1.7.3"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/papandreou/node-memoizeasync#readme",
  "keywords": [
    "memo",
    "memoize",
    "async",
    "cache"
  ],
  "license": "BSD",
  "main": "lib/memoizeAsync.js",
  "name": "memoizeasync",
  "optionalDependencies": {},
  "readme": "node-memoizeasync\n=================\n\nYet another memoizer for asynchronous functions.\n\n```javascript\nfunction myExpensiveComputation(arg1, arg2, cb) {\n   // ...\n   cb(null, result);\n}\n\nvar memoized = memoizeAsync(myExpensiveComputation);\n```\n\nNow `memoized` works exactly like myExpensiveComputation, except that\nthe actual computation is only performed once for each unique set of\narguments (apart from the callback):\n\n```javascript\nmemoized(42, 100, function (err, result) {\n    // Got the result!\n\n    memoized(42, 100, function (err, result) {\n        // Got the same result, and much faster this time!\n    });\n});\n```\n\nThe function returned by `memoizeAsync` invokes the wrapped function\nin the context it's called in itself, so `memoizeAsync` even works for\nmemoizing a method that has access to instance variables:\n\n```javascript\nfunction Foo(name) {\n    this.name = name;\n}\n\nFoo.prototype.myMethod = memoizeAsync(function (arg1, arg2, cb) {\n    console.warn(\"Cool, this.name works here!\", this.name);\n    // ...\n    cb(null, \"That was tough, but I'm done now!\");\n});\n```\n\nTo distinguish different invocations (whose results need to be cached\nseparately) `memoizeAsync` relies on a naive stringification of the\narguments, which is looked up in an internally kept hash. If the\nfunction you're memoizing takes non-primitive arguments you might want\nto provide a custom `argumentsStringifier` as the second argument to\n`memoizeAsync`. Otherwise all object arguments will be considered equal\nbecause they stringify to `[object Object]`:\n\n```javascript\nvar memoized = memoizeAsync(function functionToMemoize(obj, cb) {\n    // ...\n    cb(null, Object.keys(obj).join(''));\n}, function argumentStringifier(args) {\n   return args.map(function (arg) {return JSON.stringify(arg);}).join(\",\");\n});\n\nmemoized({foo: 'bar'}, function (err, result) {\n    // result === 'foo'\n    memoized({quux: 'baz'}), function (err, result) {\n        // result === 'quux'\n    });\n});\n```\n\nHad the custom `argumentsStringifier` not been provided, `result`\nwould have been `foo` both times.\n\nCheck out <a\nhref=\"https://github.com/papandreou/node-memoizeasync/blob/master/test/memoizeAsync.js\">the\ncustom argumentsStringifier test</a> for another example.\n\n\nInstallation\n------------\n\nMake sure you have node.js and npm installed, then run:\n\n    npm install memoizeasync\n\nLicense\n-------\n\n3-clause BSD license -- see the `LICENSE` file for details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/papandreou/node-memoizeasync.git"
  },
  "scripts": {
    "prepublish": "mocha",
    "test": "mocha"
  },
  "version": "0.0.1"
}
