{
  "_args": [
    [
      {
        "raw": "npm-registry@https://registry.npmjs.org/npm-registry/-/npm-registry-0.1.13.tgz",
        "scope": null,
        "escapedName": "npm-registry",
        "name": "npm-registry",
        "rawSpec": "https://registry.npmjs.org/npm-registry/-/npm-registry-0.1.13.tgz",
        "spec": "https://registry.npmjs.org/npm-registry/-/npm-registry-0.1.13.tgz",
        "type": "remote"
      },
      "/home/sstafyniak/src/poc-metalsmith/node_modules/metalsmith-optipng"
    ]
  ],
  "_from": "npm-registry@>=0.1.0 <0.2.0",
  "_id": "npm-registry@0.1.13",
  "_inCache": true,
  "_location": "/metalsmith-optipng/npm-registry",
  "_phantomChildren": {},
  "_requested": {
    "raw": "npm-registry@https://registry.npmjs.org/npm-registry/-/npm-registry-0.1.13.tgz",
    "scope": null,
    "escapedName": "npm-registry",
    "name": "npm-registry",
    "rawSpec": "https://registry.npmjs.org/npm-registry/-/npm-registry-0.1.13.tgz",
    "spec": "https://registry.npmjs.org/npm-registry/-/npm-registry-0.1.13.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/metalsmith-optipng",
    "/metalsmith-optipng/licenses",
    "/metalsmith-optipng/shrinkwrap"
  ],
  "_resolved": "https://registry.npmjs.org/npm-registry/-/npm-registry-0.1.13.tgz",
  "_shasum": "9e5d8b2fdfc1ab5990d47f7debbe231d79a9e822",
  "_shrinkwrap": null,
  "_spec": "npm-registry@https://registry.npmjs.org/npm-registry/-/npm-registry-0.1.13.tgz",
  "_where": "/home/sstafyniak/src/poc-metalsmith/node_modules/metalsmith-optipng",
  "author": {
    "name": "Arnout Kazemier"
  },
  "bugs": {
    "url": "https://github.com/3rd-Eden/npmjs/issues"
  },
  "dependencies": {
    "debug": "0.8.x",
    "extract-github": "0.0.x",
    "licenses": "0.0.x",
    "mana": "0.1.x",
    "semver": "2.2.x"
  },
  "description": "An high available npm registry client",
  "devDependencies": {
    "chai": "1.9.x",
    "mocha": "1.18.x",
    "pre-commit": "0.0.x"
  },
  "homepage": "https://github.com/3rd-Eden/npmjs",
  "keywords": [
    "npm",
    "npm-registry",
    "npm-registry-client",
    "npm-ui",
    "npm-www",
    "npm.js",
    "npmjs",
    "registry",
    "registry-client"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "npm-registry",
  "optionalDependencies": {},
  "readme": "# npm-registry\n\nTo keep myself sane while working with The npm Registry I decided to write my\nown library to deal with all the incomplete, inconsistent and horrible data\nstructures that are available in The npm Registry. NoSQL is nice and all, but\nthat doesn't mean you should leave your data unmaintained. This library is never\nmeant as a full replacement of the `npm-registry-client` which the `npm` bin\nfile is using. Unless those API's and methods are so poorly implemented or\ndesigned that I get a mental breakdown, then yes, this will become a full and\nusable replacement of the above said module.\n\nThis module is written with high availability in mind. The main reason behind\nthis is that npm Inc. has added a lot of moving parts on top of the registry\nwhich frequently breaks. In order to combat this I've implemented automatic\ndowngrading to multiple registries. If all other supplied registries fail to\nwork an automatic exponential randomized back off algorithm kicks in place and\nretries the query once more. This functionality is all provided by the awesome\n[mana] package which provides core functionality for writing sane api-clients.\n\n## Installation\n\n```\nnpm install --save npm-registry\n```\n\nAnd that is all you need to type in your terminal in order to prevent becoming\nterminal. The `--save` tells `npm` to automatically add the package and latest\nversion to your `package.json`.\n\n## Getting started\n\nNow that you've installed the `npm-registry` module you can require and\ninitialize it using:\n\n```js\n'use strict';\n\nvar Registry = require('npm-registry');\n\nvar npm = new Registry({ options });\n```\n\nAs seen in the example above, the `Registry` constructor allows an `Object` with\noptions to customize the npm registry client. The following options are supported:\n\n- `registry` The URL of the npm registry. Defaults to Nodejitsu's mirror.\n- `stats` URL of the download stats service. Defaults to npm's API server.\n- `mirrors` Array of mirrors to use when a registry is down.\n- `maxdelay` Maximum delay for exponential back off.\n- `mindelay` Minimum delay for exponential back off.\n- `githulk` Reference to a pre-configured [GitHulk] instance.\n- `retries` The amount of retries we should do before giving up.\n- `factor` Exponential backoff factor.\n- `authorization` Optional authorization header for authorized requests.\n- `user,password` Optional user/password for authorized requests.\n\nThe fully configured npm registry client can then be used to access the various\nof API endpoints using:\n\n```js\n//\n// npm.<endpoint>.<method>(<arg>, <callback>);\n//\nnpm.packages.get('npm-registry', function (err, data) {\n  ..\n});\n```\n\nThe following endpoints are available:\n\n### Packages\n\nThe `.packages` endpoints allows you to retrieve detailed information about npm\npackages. The following methods are implemented:\n\n- [npm.packages.get](#npmpackagesget)\n- [npm.packages.details](#npmpackagesdetails)\n- [npm.packages.depended](#npmpackagesdepended)\n- [npm.packages.starred](#npmpackagesstarred)\n- [npm.packages.keyword](#npmpackageskeyword)\n- [npm.packages.releases](#npmpackagesreleases)\n- [npm.packages.release](#npmpackagesrelease)\n- [npm.packages.range](#npmpackagesrange)\n\n#### npm.packages.get\n\nGet information from the npm package. If the name contains an `@` char we assume\nthat the user wants to get a specific version instead.\n\nExample: **primus@0.1.1 would retrieve primus version 0.1.1**\n\n```js\nnpm.packages.get('primus', function (err, data) {\n\n});\n```\n\n#### npm.packages.details\n \nRetrieve additional details for the package information. This a lot slower than\na simple `.get` but much more detailed and accurate as it uses custom parsers\nfor accurate licensing information. Which could require a fair amount of npm and\ngithub lookups.\n\n```js\nnpm.packages.details('memcached', function (err, data) {\n\n});\n```\n\n#### npm.packages.depended\n\nGet all packages that are depended upon a given package name.\n\n```js\nnpm.packages.depended('eventemitter3', function (err, depended) {\n\n});\n```\n\n#### npm.packages.starred\n\nFind out which users have starred the given package.\n\n```js\nnpm.packages.starred('npm-registry', function (err, starred) {\n\n});\n```\n\n#### npm.packages.keyword\n \nFind all packages that matches the giving keywords.\n\n```js\nnpm.packages.keyword('primus');\n```\n \n#### npm.packages.releases\n\nRetrieve all release specific information for the given package name. Please\nnote that this uses the `npm.packages.details` call under the hood to provide\nmore detailed information but it will therefor also take longer.\n\n```js\nnpm.packages.releases('bigpipe', function (err, releases) {\n\n});\n```\n\n#### npm.packages.release\n\nGet a specific release of a package. Please note that this uses the\n`npm.packages.details` call under the hood to provide more detailed information\nbut it will therefor also take longer.\n\n```js\nnpm.packages.release('npm-registry', '0.0.2', function (err, release) {\n\n});\n```\n\n#### npm.packages.range\n\nGet a release that is satisfying a given semver range. Please note that this\nuses the `npm.packages.details` call under the hood to provide more detailed\ninformation but it will therefor also take longer.\n\n```js\nnpm.packages.release('npm-registry', '^0.1.2', function (err, release) {\n\n});\n```\n\n### Users\n\nThe `.users` endpoint allows you to retrieve detailed information about a given\nnpm account. The following methods are implemented:\n\n- [npm.users.add](#npmusersadd)\n- [npm.users.create](#npmuserscreate)\n- [npm.users.update](#npmusersupdate)\n- [npm.users.list](#npmuserslist)\n- [npm.users.starred](#npmusersstarred)\n- [npm.users.get](#npmusersget)\n- [npm.users.sync](#npmuserssync)\n\n#### npm.users.add\n\nAdd a user as maintainer of a package.\n\n```js\nnpm.users.add('foobar', 'npm-registry', function (err) {\n\n});\n```\n\n#### npm.users.create\n\nCreate a new npm account.\n\n```js\nnpm.users.create('foobar', 'foo@bar.com', 'secretpassword', function (err) {\n\n});\n```\n\n#### npm.users.update\n\nUpdate the users.\n\n```js\nnpm.users.update('foobar', {\n  twitter: 'foobar',\n  email: 'foo@foobar.bar'\n}, function (err) {\n\n});\n```\n\n#### npm.users.list\n\nList all packages that the user maintains.\n\n```js\nnpm.users.list('foobar', function (err, modules) {\n\n});\n```\n\n#### npm.users.starred\n\nGet all packages that the user has starred.\n\n```js\nnpm.users.starred('foobar', function (err, modules) {\n  \n});\n```\n\n#### npm.users.get\n\nGet profile information for a given user.\n\n```js\nnpm.users.get('foobar', function (err) {\n\n});\n```\n\n#### npm.users.sync\n\nSync ownership of npm modules with another account. This is useful if you have\none base owner of modules like a corporate account and you want to on-board a\nnew user.\n\n```js\nnpm.users.sync('source-account', 'foobar', function (err) {\n\n});\n```\n\n### Downloads\n\nThe `.downloads` endpoint allows you to retrieve download stats for a given\npackage. The following methods are implemented:\n\n- [npm.downloads.totals](#npmdownloadstotals)\n- [npm.downloads.range](#npmdownloadsrange)\n\n#### npm.downloads.totals\n \nGet the total amount of downloads for a given period. If no package name has\nbeen supplied the total of all packages will be returned. The following date ranges\nare accepted by the stats server.\n\n- All packages, last day:\n- last day: `last-day`\n- specific date: `2014-02-01`\n- last week: `last-week\n- range of date (30 days max): `2014-02-01:2014-02-08`\n- last month: `last-month`A\n- specific month: `2014-01-01:2014-01-31`\n\n```js\nnpm.downloads.totals('last-week', 'npm-registry', function (err, stats) {\n\n});\n```\n\n#### npm.downloads.range\n\nSame as above, but it doesn't get the total/summary of the downloads but an array\nwith the downloads per day. The same date ranges are allowed and if no package name\nis supplied, all packages is assumed. \n\n```js\nnpm.downloads.range('last-week', 'npm-registry', function (err, stats) {\n\n});\n```\n\n## Normalization\n\nAs the internal data structure is do damn awkward and unmaintained in npm we\nneed to normalize the data structures before we can even try to use it. While\nthis normalization is part automatically done for you internally there might be\nuse cases where you want to manually normalize a given dataset. The normalize\nmodule can be required directly using:\n\n```js\nvar normalize = require('npm-registry/normalize');\n```\n\nThe `normalize` variable now contains two different functions, `users` and\n`packages`. As you might have guessed, these functions normalize different data\nstructures. The function accepts a simple single argument which is the data\nobject that you receive from the npm registry endpoints.\n\n```js\ndata = normalize.packages(data);\n```\n\n## License\n\nMIT\n\n[mana]: http://github.com/3rd-Eden/mana\n[Githulk]: http://github.com/3rd-Eden/githulk\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/3rd-Eden/npmjs.git"
  },
  "scripts": {
    "test": "mocha $(find test -name '*.test.js')"
  },
  "version": "0.1.13"
}
